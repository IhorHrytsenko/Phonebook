{"version":3,"sources":["redux/auth/operationsAuth.js","redux/operations.js","components/PrivateRoute.js","components/PublicRoute.js","App.js","redux/reduser.js","redux/auth/reduserAuth.js","redux/store.js","index.js"],"names":["token","axios","defaults","headers","common","Authorization","registerContacts","createAsyncThunk","credentials","a","post","data","console","log","loginContacts","refreshContacts","_","thunkAPI","state","getState","pesistedToken","auth","rejectWithValue","get","operationsAuth","logoutContacts","fetchContacts","credantials","fetchAddContacts","name","number","fetchDeleteContacts","id","delete","operations","filterAction","createAction","connect","children","isLogin","to","restricted","shouldRedirect","MainMenu","lazy","Register","Contacts","Login","HomeView","dispatch","useDispatch","useEffect","ifRefresh","fallback","path","exact","LocalStore","contacts","createReducer","fulfilled","payload","filter","combineReducers","authSlice","createSlice","initialState","user","email","extraReducers","action","pending","rejected","authPersistConfig","key","storage","whitelist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","persistReducer","reduserAuth","phonebook","reducerContact","devTools","persistor","persistStore","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.5bc1055a.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\n\r\nconst token = {\r\n    set (token) {\r\n        axios.defaults.headers.common.Authorization = `${token}`\r\n    },\r\n\r\n    unset(){\r\n        axios.defaults.headers.common.Authorization = ``;\r\n    },\r\n\r\n}\r\n\r\n\r\n    const registerContacts = createAsyncThunk('contacts/registerContacts',\r\n        async (credentials) => {\r\n            try{\r\n            const {data} = await axios.post(`https://connections-api.herokuapp.com/users/signup`, credentials);\r\n                token.set(data.token);\r\n            return data;\r\n            }\r\n            catch(error){\r\n                console.log(error);\r\n            }\r\n        })\r\n\r\n\r\n    const loginContacts = createAsyncThunk('contacts/loginContacts', \r\n        async (credentials) => {\r\n            try{\r\n            const {data} = await axios.post(`https://connections-api.herokuapp.com/users/login`, credentials);\r\n            token.set(data.token);\r\n            return data;\r\n            }\r\n            catch(error){\r\n                console.log(error);\r\n            }\r\n        })\r\n\r\n    const refreshContacts = createAsyncThunk('contacts/refreshContacts', \r\n        async (_, thunkAPI) => {\r\n            const state = thunkAPI.getState();\r\n            const pesistedToken = state.auth.token;\r\n\r\n            if (pesistedToken === null){\r\n                return thunkAPI.rejectWithValue();\r\n            }\r\n\r\n            token.set(pesistedToken);\r\n        try{\r\n            \r\n            const {data} = await axios.get(`https://connections-api.herokuapp.com/users/current`);\r\n            return data;  \r\n\r\n        }\r\n            catch(error){\r\n                console.log(error);\r\n            }\r\n        })\r\n\r\n    const logoutContacts = createAsyncThunk('contacts/logoutContacts', \r\n        async () => {\r\n            try{\r\n            const {data} = await axios.post(`https://connections-api.herokuapp.com/users/logout`);\r\n            \r\n            token.unset();\r\n\r\n            return data;\r\n            }\r\n            catch(error){\r\n                console.log(error);\r\n            }\r\n        })\r\n    \r\n\r\nconst operationsAuth = {\r\n    registerContacts,\r\n    loginContacts,\r\n    logoutContacts,\r\n    refreshContacts,\r\n}\r\n\r\n\r\nexport default operationsAuth;","import axios from 'axios';\r\nimport { createAsyncThunk, createAction } from '@reduxjs/toolkit';\r\n// import { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\n\r\n// решение через action\r\n// const fetchContacts = () => async dispatch => {\r\n//     dispatch(actions.fetchContactsRequest());\r\n//     try{\r\n//     const {data} = await axios.get(`https://619950b09022ea0017a7ae1c.mockapi.io/apiv1/contacts`)  \r\n//     dispatch(actions.fetchContactsSuccess(data));\r\n//     }\r\n//     catch (error){\r\n//         dispatch(actions.fetchContactsError(error));\r\n//     }\r\n// }\r\n\r\n\r\n//прошлое API\r\n// const fetchContacts = createAsyncThunk(\r\n// 'contacts/fetchContacts',\r\n// async () => \r\n// {\r\n//     const {data} = await axios.get(`https://619950b09022ea0017a7ae1c.mockapi.io/apiv1/contacts`);\r\n//     return data;\r\n// })\r\n\r\n// const fetchAddContacts = createAsyncThunk(\r\n//     'contacts/fetchAddContacts', \r\n//     async ({name, number}) => {\r\n//         const {data} = await axios.post(`https://619950b09022ea0017a7ae1c.mockapi.io/apiv1/contacts`,\r\n//             {id: uuidv4(), name, number },  \r\n//         );\r\n//         return data;\r\n// })\r\n\r\n// const fetchDeleteContacts = createAsyncThunk(\r\n//     'contacts/fetchDeleteContacts', \r\n//     async (id) => {\r\n//         const {data} = await axios.delete(`https://619950b09022ea0017a7ae1c.mockapi.io/apiv1/contacts/${id}`);\r\n//         return data;\r\n// })\r\n\r\nconst fetchContacts = createAsyncThunk(\r\n    'contacts/fetchContacts',\r\n    async (credantials) => \r\n    {\r\n        try{\r\n        const {data} = await axios.get(`https://connections-api.herokuapp.com/contacts`, credantials);\r\n        return data;\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n        }\r\n    })\r\n    \r\n    const fetchAddContacts = createAsyncThunk(\r\n        'contacts/fetchAddContacts', \r\n        async ({name, number}) => {\r\n\r\n            try{\r\n            const {data} = await axios.post(`https://connections-api.herokuapp.com/contacts`,\r\n                { name, number },  \r\n            );\r\n            return data;\r\n            }\r\n            catch(error){\r\n                console.log(error);\r\n            }\r\n    })\r\n    \r\n    const fetchDeleteContacts = createAsyncThunk(\r\n        'contacts/fetchDeleteContacts', \r\n        async (id) => {\r\n            try{\r\n            await axios.delete(`https://connections-api.herokuapp.com/contacts/${id}`);\r\n            return id;\r\n            }\r\n        catch(error){\r\n            console.log(error);\r\n        }\r\n    })\r\n\r\nconst filterAction = createAction('contact/Filter');\r\n\r\n\r\nconst operations = {\r\n    fetchContacts, \r\n    fetchAddContacts,\r\n    fetchDeleteContacts,\r\n    filterAction,\r\n}\r\n\r\nexport default operations;\r\n\r\n","import { connect } from 'react-redux';\r\nimport {Route, Redirect} from 'react-router-dom';\r\n\r\n\r\nfunction PrivateRoute({auth, children, ...state}) {\r\n\r\n    const isLogin =  auth.isLogin;\r\n\r\n    return <Route {...state}>\r\n        {isLogin ? children : <Redirect to=\"/Contacts\" />}\r\n        </Route>; \r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    auth: state.auth,\r\n\r\n})\r\n\r\nexport default connect (mapStateToProps, null)(PrivateRoute)","import { connect } from 'react-redux';\r\nimport {Route, Redirect} from 'react-router-dom';\r\n\r\n\r\nfunction PublicRoute({auth, children, restricted = false, ...state}) {\r\n\r\n    const isLogin = auth.isLogin;\r\n    const shouldRedirect = isLogin && restricted\r\n\r\n    return <Route {...state}>{ shouldRedirect ? <Redirect to='/' /> : children}</Route>\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    auth: state.auth,\r\n\r\n})\r\n\r\nexport default connect (mapStateToProps, null)(PublicRoute)","import React, {lazy, Suspense, useEffect} from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport {Switch} from 'react-router-dom';\nimport operations from './redux/auth/operationsAuth';\nimport PrivateRoute from './components/PrivateRoute'; \nimport PublicRoute from './components/PublicRoute';\n\nconst MainMenu = lazy(() => import('./views/MainMenu.js'));\nconst Register = lazy(() => import('./views/Register.js'));\nconst Contacts = lazy(() => import('./views/Contacts.js'));\nconst Login = lazy(() => import('./views/Login.js'));\nconst HomeView = lazy(() => import('./views/HomeView.js')); \n\n\nconst App = (state) => {\n\n  const dispatch = useDispatch();\n\n  useEffect(() =>{\n    dispatch(operations.refreshContacts())\n\n  }, [dispatch])\n\n  return (!state.auth.ifRefresh && (\n\n    <Suspense fallback={<h1>AAAAAВСТРАААААЛИЯЯЯЯ!!!</h1>}>\n\n    <MainMenu />\n \n    <Switch>\n        <PublicRoute path='/' exact>\n          <HomeView />\n        </PublicRoute>\n\n        <PublicRoute path='/Login' exact restricted>\n          <Login />\n        </PublicRoute>\n\n        <PublicRoute path='/Register' exact restricted>\n          <Register />\n        </PublicRoute>\n        \n        <PrivateRoute path='/Contacts/' exact>\n          <Contacts />\n        </PrivateRoute>\n    </Switch>\n    \n    </Suspense>\n\n\n  ));\n}\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n\n})\n\n\nexport default connect(mapStateToProps, null)(App);\n","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\r\nimport operations from './operations';\r\n\r\n\r\nconst LocalStore = {\r\n    contacts: [],\r\n    filter: '',\r\n\r\n}\r\n\r\n\r\n\r\nconst contacts = createReducer([], {\r\n    [operations.fetchContacts.fulfilled]: (_, {payload}) => payload,\r\n\r\n    [operations.fetchAddContacts.fulfilled]: (state, {payload}) => {\r\n\r\n            state = [...state, payload];\r\n            return state;\r\n\r\n    },\r\n\r\n    [operations.fetchDeleteContacts.fulfilled]: (state, {payload}) => {\r\n\r\n        state = state.filter(({id}) => id !== payload);\r\n\r\n        return state;\r\n    }\r\n\r\n})\r\n\r\nconst filter = createReducer(LocalStore.filter, {\r\n    [operations.filterAction]: (state, {payload}) => {\r\n\r\n       \r\n        if (payload !== ''){\r\n            return state = payload;\r\n        }\r\n        \r\n        if (payload === '') {\r\n            return LocalStore.filter;\r\n        }\r\n            return LocalStore.filter;\r\n    }\r\n\r\n})\r\n\r\n\r\n// const isLoading = createReducer (false, {\r\n//     [actions.fetchContactsRequest]: () => true,\r\n//     [actions.fetchContactsSuccess]: () => false,\r\n//     [actions.fetchContactsError]: () => false,\r\n// })\r\n\r\nexport default combineReducers({\r\n    contacts,\r\n    filter,\r\n})\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport operations from './operationsAuth';\r\n\r\n\r\nconst initialState = {\r\n    user: {\r\n        name: null,\r\n        email: null,\r\n    },\r\n    token: null,\r\n    isLogin: false,\r\n    ifRefresh: false,\r\n}\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    extraReducers:{\r\n        [operations.registerContacts.fulfilled](state, action){\r\n\r\n            state.user = action.payload.user;\r\n            state.token = action.payload.token;\r\n            state.isLogin = true;\r\n        },\r\n\r\n        [operations.loginContacts.fulfilled](state, action){\r\n\r\n            state.user = action.payload.user;\r\n            state.token = action.payload.token;\r\n            state.isLogin = true;\r\n        },\r\n\r\n\r\n\r\n        [operations.logoutContacts.fulfilled](state, _){\r\n\r\n            //иначе не обрабатывается изменение стилей в MainMenu\r\n            state.isLogin = false;\r\n            state.user.name = null;\r\n            state.user.email = null;\r\n            state.token = null;\r\n        },\r\n\r\n        [operations.refreshContacts.pending](state){\r\n            state.ifRefresh = true;\r\n        },\r\n\r\n        [operations.refreshContacts.fulfilled](state, action){\r\n\r\n            state.user = {...action.payload};\r\n            state.isLogin = true;\r\n            state.ifRefresh = false;\r\n        },\r\n        \r\n        [operations.refreshContacts.rejected](state){\r\n            state.ifRefresh = false;\r\n        }\r\n    },\r\n\r\n});\r\n\r\nexport default authSlice.reducer;","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER,} from 'redux-persist';\r\nimport reducerContact from './reduser';\r\nimport reduserAuth from './auth/reduserAuth';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n}\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    auth: persistReducer(authPersistConfig, reduserAuth),\r\n    phonebook: reducerContact,\r\n  },\r\n  middleware,\r\n  devTools: true,\r\n\r\n});\r\n\r\n// const store = configureStore({\r\n//   reducer: reducerContact,\r\n//   devTools: true,\r\n\r\n// });\r\n\r\nexport const persistor = persistStore(store);\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {PersistGate} from 'redux-persist/es/integration/react';\nimport {persistor, store} from './redux/store';\nimport { BrowserRouter } from 'react-router-dom';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n      <BrowserRouter>\n      <App />\n      </BrowserRouter>\n      </PersistGate>\n    </Provider>\n\n,document.getElementById('root'));\n"],"sourceRoot":""}